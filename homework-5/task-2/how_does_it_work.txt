    1)Сначала, происходит инициализация нашего класса Router путем вызова метода init, что позволяет убедится, что
позволяет не выносить лишнюю логику из класса. Далее, в методе init вызывается метод resources с двумя аргументами:
PostController и "posts". PostController передаётся, для создания инстанса данного класса, "posts" передаётся, для
того, чтобы сохранить в поле @routes класса Router хэш, содержащий методы инстанса класса PostController, которые
использует модуль Resource. После, запускается бесконечный цикл, запрашивающий у нас ввод, результат которого должен
быть использован для маршрутизации - 1 (вызов posts), 2 (вызов comments, однако на данный момент не реализовано) и q
(выход). В случае выбора 1, будет вызван метод connection, который был добавлен в PostsController модулем Resource.
Метод connection принимает аргументом хэш, который содержит в себе методы PostsController (ранее описал принцип работы).
После, connection проводит нулл-чек на приняет аргумент, и продолжает работу, если аргумент не равен нуллу.
После, запускается бесконечный цикл, который ждёт ввод аргументов: GET/POST/PUT/DELETE или q. После, в случае, если
мы ввели аргумент GET у нас запрашивают уточнение - вызвать метод index или show. В итоге, будет вызван указанный
нами метод PostController'a, в соответствии с нашим вводом. (GET - index или show; POST - create; PUT - update;
DELETE - destroy).
    2)PostController extend'ит Resource, потому что нам нужно, чтобы он содержал реализуемый Resource'ом метод
connect, и относился не к объекту, а к классу PostController.